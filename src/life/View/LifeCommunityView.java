/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package life.View;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Rectangle;
import java.awt.Graphics;
import java.awt.Graphics2D;
import life.Model.LifeCommunity;
import life.Model.LifeCell;

/**
 *
 * @author KeithW
 */
public class LifeCommunityView extends javax.swing.JPanel {

    private LifeCommunity communityModel;
    private String sViewMode;
    private int iCellHeight, iCellWidth, iYOffset;

    /**
     * Creates new form LifeCommunityView
     */
    public LifeCommunityView() {
        
        // Set the default mode to show cells by their state.
        sViewMode = "STATE";
        
        // How big is each cell
        iCellHeight = iCellWidth = 4;
        
        // How far down do we draw the community?
        iYOffset = 14;

        initComponents();
    }

    public void setCommunityModel(LifeCommunity communityModel) {
        this.communityModel = communityModel;

    }

    public void setViewMode(String sViewMode) {
        this.sViewMode = sViewMode;
    }

    @Override
    public void paint(Graphics g) {

        super.paint(g);

        if (this.communityModel == null) {
            return;
        }

        Graphics2D g2d = (Graphics2D) g;

        g2d.setStroke(new BasicStroke((float) this.iCellHeight/5, BasicStroke.CAP_ROUND, BasicStroke.JOIN_ROUND));
        // g2d.setStroke(new BasicStroke(2.0f));
        
        // Draw the area where the community will live
        Rectangle rectCommunityArea = new Rectangle(0, 0 + this.iYOffset, communityModel.getWidth() * this.iCellWidth, communityModel.getHeight() * this.iCellHeight);
        g2d.setColor(Color.LIGHT_GRAY);
        g2d.fill(rectCommunityArea);
        g2d.setColor(Color.DARK_GRAY);
        g2d.draw(rectCommunityArea);

        // Render the community in one of two modes; Transition mode or State mode
        for (int x = 0; x < communityModel.getWidth(); x++) {
            for (int y = 0; y < communityModel.getHeight(); y++) {

                // If viewing the transitions then use the last transition to colour code a cell
                if (sViewMode.equals("TRANSITION")) {

                    LifeCell.LifeStateTransition transition = communityModel.getCellStateTransition(x, y);

                    Color colorCell = Color.BLACK;

                    switch (transition) {
                        case DIED:
                            colorCell = Color.red;
                            break;
                        case BORN:
                            colorCell = Color.BLACK;
                            break;
                        case SURVIVED:
                            colorCell = Color.BLUE;
                            break;
                        case DORMANT:
                            colorCell = Color.WHITE;
                            break;
                        default:
                            colorCell = Color.GRAY;
                            break;
                    }

                    // only draw non-DORMANT cells...
                    if (transition != LifeCell.LifeStateTransition.DORMANT) {
                   
                        Rectangle rect = new Rectangle(x * this.iCellWidth, y * this.iCellHeight + this.iYOffset, this.iCellWidth, this.iCellHeight);
                        
                        g2d.setColor(colorCell);
                        g2d.fill(rect);
                        
                        g2d.setColor(Color.BLACK);
                        g2d.draw(rect);
                    }
                    
                } 
                // If in State mode only draw alive cells....
                else if (communityModel.getCellState(x, y) == LifeCell.LifeState.ALIVE) {

                    Rectangle rect = new Rectangle(x * this.iCellWidth, y * this.iCellHeight + this.iYOffset, this.iCellWidth, this.iCellHeight);
                    
                    g2d.setColor(Color.DARK_GRAY);
                    g2d.fill(rect);
                    
                    g2d.setColor(Color.BLACK);
                    g2d.draw(rect);

                }
            }
        }

        g2d.setColor(Color.RED);
        g2d.drawString("G=" + communityModel.getGenerations() + ",A=" + communityModel.getAlive() + ",B=" + communityModel.getBorn() + ",D=" + communityModel.getDied(), 0, 10);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
